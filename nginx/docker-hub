# 动态映射子域名到不同的后端
# 使用 map 来匹配和替换 upstream 头部中的 auth.docker.io
map $upstream_http_www_authenticate $m_www_authenticate_replaced {
    "~auth\.docker\.io(.*)" "$1";
    default "";
}

map $m_www_authenticate_replaced $m_final_replaced {
    "~(.*)" 'Bearer realm=\"$scheme://$host$1';
    default "";
}

server {
    listen 443 ssl;
    server_name docker.mtftm.com;
    resolver 1.1.1.1 8.8.8.8;  # 添加 DNS 解析器

    ssl_certificate /etc/letsencrypt/live/mtftm.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/mtftm.com/privkey.pem;

    proxy_ssl_server_name on; # 启用SNI
    client_max_body_size 1024M;  #客户端最大上传量
    ssl_session_timeout 24h;
    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256';
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;

    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    # 修改jwt授权地址
    proxy_hide_header www-authenticate;
    add_header www-authenticate "$m_final_replaced" always;

    # 关闭缓存
    proxy_buffering off;
    # 转发认证相关
    proxy_set_header Authorization $http_authorization;
    proxy_pass_header  Authorization;

    # 对 upstream 状态码检查，实现 error_page 错误重定向
    proxy_intercept_errors on;
    recursive_error_pages on;
    # 根据状态码执行对应操作，以下为301、302、307状态码都会触发
    error_page 301 302 307 = @handle_redirect;

    # error_page 429 = @handle_too_many_requests;

    # v1 api
    location /v1 {
        proxy_pass https://index.docker.io;
        proxy_set_header Host index.docker.io;
    }
    # v2 api
    location /v2 {
        proxy_pass https://index.docker.io;
        proxy_set_header Host index.docker.io;
    }
    # jwt授权地址
    location /token {
        proxy_pass https://auth.docker.io;
        proxy_set_header Host auth.docker.io;
    }
    location / {
        # Docker hub 的官方镜像仓库
        proxy_pass https://registry-1.docker.io;
        proxy_set_header Host registry-1.docker.io;
    }
   #处理重定向
   location @handle_redirect {
           resolver 1.1.1.1;
           set $saved_redirect_location '$upstream_http_location';
           proxy_pass $saved_redirect_location;
   }
}

server {
    listen 80;
    listen [::]:80;

    server_name docker.mtftm.com;
    
    return 301 https://$host$request_uri; # 永久跳转到 HTTPS
}